// Code generated by github.com/0B1t322/zero-validation, DO NOT EDIT.
package ogen

import (
    "github.com/0B1t322/zero-validaton/field"
    jsonschema "github.com/ogen-go/ogen/jsonschema"
    parsedPackage "github.com/ogen-go/ogen"
    
)


type schemaExtractor struct {
    Ref field.StructField[parsedPackage.Schema,string]
    Summary field.StructField[parsedPackage.Schema,string]
    Description field.StructField[parsedPackage.Schema,string]
    ExternalDocs field.StructField[parsedPackage.Schema,*parsedPackage.ExternalDocumentation]
    Type field.StructField[parsedPackage.Schema,string]
    Format field.StructField[parsedPackage.Schema,string]
    Properties field.StructField[parsedPackage.Schema,parsedPackage.Properties]
    AdditionalProperties field.StructField[parsedPackage.Schema,*parsedPackage.AdditionalProperties]
    PatternProperties field.StructField[parsedPackage.Schema,parsedPackage.PatternProperties]
    Required field.StructField[parsedPackage.Schema,[]string]
    Items field.StructField[parsedPackage.Schema,*parsedPackage.Items]
    Nullable field.StructField[parsedPackage.Schema,bool]
    AllOf field.StructField[parsedPackage.Schema,[]*parsedPackage.Schema]
    OneOf field.StructField[parsedPackage.Schema,[]*parsedPackage.Schema]
    AnyOf field.StructField[parsedPackage.Schema,[]*parsedPackage.Schema]
    Discriminator field.StructField[parsedPackage.Schema,*parsedPackage.Discriminator]
    XML field.StructField[parsedPackage.Schema,*parsedPackage.XML]
    Enum field.StructField[parsedPackage.Schema,parsedPackage.Enum]
    MultipleOf field.StructField[parsedPackage.Schema,parsedPackage.Num]
    Maximum field.StructField[parsedPackage.Schema,parsedPackage.Num]
    ExclusiveMaximum field.StructField[parsedPackage.Schema,bool]
    Minimum field.StructField[parsedPackage.Schema,parsedPackage.Num]
    ExclusiveMinimum field.StructField[parsedPackage.Schema,bool]
    MaxLength field.StructField[parsedPackage.Schema,*uint64]
    MinLength field.StructField[parsedPackage.Schema,*uint64]
    Pattern field.StructField[parsedPackage.Schema,string]
    MaxItems field.StructField[parsedPackage.Schema,*uint64]
    MinItems field.StructField[parsedPackage.Schema,*uint64]
    UniqueItems field.StructField[parsedPackage.Schema,bool]
    MaxProperties field.StructField[parsedPackage.Schema,*uint64]
    MinProperties field.StructField[parsedPackage.Schema,*uint64]
    Default field.StructField[parsedPackage.Schema,parsedPackage.Default]
    Example field.StructField[parsedPackage.Schema,parsedPackage.ExampleValue]
    Deprecated field.StructField[parsedPackage.Schema,bool]
    ContentEncoding field.StructField[parsedPackage.Schema,string]
    ContentMediaType field.StructField[parsedPackage.Schema,string]
    Common field.StructField[parsedPackage.Schema,jsonschema.OpenAPICommon]
}

var ValidateSchema = schemaExtractor{
    Ref: field.NewField(
        "Ref",
    nil,
        func(from parsedPackage.Schema) string { return from.Ref },
    ),
    Summary: field.NewField(
        "Summary",
    nil,
        func(from parsedPackage.Schema) string { return from.Summary },
    ),
    Description: field.NewField(
        "Description",
    nil,
        func(from parsedPackage.Schema) string { return from.Description },
    ),
    ExternalDocs: field.NewField(
        "ExternalDocs",
    nil,
        func(from parsedPackage.Schema) *parsedPackage.ExternalDocumentation { return from.ExternalDocs },
    ),
    Type: field.NewField(
        "Type",
    nil,
        func(from parsedPackage.Schema) string { return from.Type },
    ),
    Format: field.NewField(
        "Format",
    nil,
        func(from parsedPackage.Schema) string { return from.Format },
    ),
    Properties: field.NewField(
        "Properties",
    nil,
        func(from parsedPackage.Schema) parsedPackage.Properties { return from.Properties },
    ),
    AdditionalProperties: field.NewField(
        "AdditionalProperties",
    nil,
        func(from parsedPackage.Schema) *parsedPackage.AdditionalProperties { return from.AdditionalProperties },
    ),
    PatternProperties: field.NewField(
        "PatternProperties",
    nil,
        func(from parsedPackage.Schema) parsedPackage.PatternProperties { return from.PatternProperties },
    ),
    Required: field.NewField(
        "Required",
    nil,
        func(from parsedPackage.Schema) []string { return from.Required },
    ),
    Items: field.NewField(
        "Items",
    nil,
        func(from parsedPackage.Schema) *parsedPackage.Items { return from.Items },
    ),
    Nullable: field.NewField(
        "Nullable",
    nil,
        func(from parsedPackage.Schema) bool { return from.Nullable },
    ),
    AllOf: field.NewField(
        "AllOf",
    nil,
        func(from parsedPackage.Schema) []*parsedPackage.Schema { return from.AllOf },
    ),
    OneOf: field.NewField(
        "OneOf",
    nil,
        func(from parsedPackage.Schema) []*parsedPackage.Schema { return from.OneOf },
    ),
    AnyOf: field.NewField(
        "AnyOf",
    nil,
        func(from parsedPackage.Schema) []*parsedPackage.Schema { return from.AnyOf },
    ),
    Discriminator: field.NewField(
        "Discriminator",
    nil,
        func(from parsedPackage.Schema) *parsedPackage.Discriminator { return from.Discriminator },
    ),
    XML: field.NewField(
        "XML",
    nil,
        func(from parsedPackage.Schema) *parsedPackage.XML { return from.XML },
    ),
    Enum: field.NewField(
        "Enum",
    nil,
        func(from parsedPackage.Schema) parsedPackage.Enum { return from.Enum },
    ),
    MultipleOf: field.NewField(
        "MultipleOf",
    nil,
        func(from parsedPackage.Schema) parsedPackage.Num { return from.MultipleOf },
    ),
    Maximum: field.NewField(
        "Maximum",
    nil,
        func(from parsedPackage.Schema) parsedPackage.Num { return from.Maximum },
    ),
    ExclusiveMaximum: field.NewField(
        "ExclusiveMaximum",
    nil,
        func(from parsedPackage.Schema) bool { return from.ExclusiveMaximum },
    ),
    Minimum: field.NewField(
        "Minimum",
    nil,
        func(from parsedPackage.Schema) parsedPackage.Num { return from.Minimum },
    ),
    ExclusiveMinimum: field.NewField(
        "ExclusiveMinimum",
    nil,
        func(from parsedPackage.Schema) bool { return from.ExclusiveMinimum },
    ),
    MaxLength: field.NewField(
        "MaxLength",
    nil,
        func(from parsedPackage.Schema) *uint64 { return from.MaxLength },
    ),
    MinLength: field.NewField(
        "MinLength",
    nil,
        func(from parsedPackage.Schema) *uint64 { return from.MinLength },
    ),
    Pattern: field.NewField(
        "Pattern",
    nil,
        func(from parsedPackage.Schema) string { return from.Pattern },
    ),
    MaxItems: field.NewField(
        "MaxItems",
    nil,
        func(from parsedPackage.Schema) *uint64 { return from.MaxItems },
    ),
    MinItems: field.NewField(
        "MinItems",
    nil,
        func(from parsedPackage.Schema) *uint64 { return from.MinItems },
    ),
    UniqueItems: field.NewField(
        "UniqueItems",
    nil,
        func(from parsedPackage.Schema) bool { return from.UniqueItems },
    ),
    MaxProperties: field.NewField(
        "MaxProperties",
    nil,
        func(from parsedPackage.Schema) *uint64 { return from.MaxProperties },
    ),
    MinProperties: field.NewField(
        "MinProperties",
    nil,
        func(from parsedPackage.Schema) *uint64 { return from.MinProperties },
    ),
    Default: field.NewField(
        "Default",
    nil,
        func(from parsedPackage.Schema) parsedPackage.Default { return from.Default },
    ),
    Example: field.NewField(
        "Example",
    nil,
        func(from parsedPackage.Schema) parsedPackage.ExampleValue { return from.Example },
    ),
    Deprecated: field.NewField(
        "Deprecated",
    nil,
        func(from parsedPackage.Schema) bool { return from.Deprecated },
    ),
    ContentEncoding: field.NewField(
        "ContentEncoding",
    nil,
        func(from parsedPackage.Schema) string { return from.ContentEncoding },
    ),
    ContentMediaType: field.NewField(
        "ContentMediaType",
    nil,
        func(from parsedPackage.Schema) string { return from.ContentMediaType },
    ),
    Common: field.NewField(
        "Common",
    nil,
        func(from parsedPackage.Schema) jsonschema.OpenAPICommon { return from.Common },
    ),
}
